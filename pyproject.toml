[project]
name = "lexical-benchmark"
description = "A detailed comparison between human (CDI) and model performance at the lexical level"
authors = [
    { name = "Nicolas Hamilakis", email = "nicolas.hamilakis@ens.psl.eu" },
    { name = "CoML Team", email = "dev@cognitive-ml.fr" },
    { name = "Jing Liu", email = "jing.liu@student.ru.nl" },
]
license = { text = "MIT License" }
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.9"
keywords = ["python"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 4 - Beta",
]
dynamic = ["dependencies", "version"]

[project.urls]
documentation = "https://github.com/Jing-L97/Lexical-benchmark"
repository = "https://github.com/Jing-L97/Lexical-benchmark"


[project.optional-dependencies]
dev = ["ruff", "mypy", "ipython", "jupyter"]
polyglot = ["polyglot", "pyicu", "pycld2", "morfessor"]
# Fairseq is having issues installing so lets make it optional
train = ["fairseq", "iopath"]

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools.packages.find]
where = ["."]
include = ["lexical_benchmark*"]
exclude = ["examples*", "tests*"]

[tool.mypy]
exclude = [
    'parser\.py$' # Exclude parser.py -> sly does not type-check
]

[tool.ruff]
target-version = "py311"
line-length = 120
exclude = ["parser.py"] # Exclude parser.py -> sly does not lint proper


[tool.ruff.lint]
select = ["ALL"] # Be brave use all rules
fixable = ["ALL"]
# remove the ones that make no sense
ignore = [
    "D100",    # allow top doc-string to be missing
    "D401",    # imperative mood in docstring is ambiguous
    "D203", "D213", # Conflicting rules about docstrings
    "S324",    # allow md5, as this is a non critical usage
    "DTZ005",  # no need for timezones in datetimes
    "S603",    # allow subprocess to be called using literals
    "PLR0913", # allow functions to have more tha 12 arguments
    "TRY003",  # allow Exceptions to contain long messages
    "EM101",   # allow Exceptions to contain literals
    "ANN003",  # allow **kwargs to be without type-hints
    "D107",    # allow __init__ without docstring
    "ANN101", "ANN102",  # "self" & "cls" need no typing (rule is Deprecated)
    "T201",    # allow 'print' statements
    "TD003",   # not all todos require a issue
    "D104",    # allow scripts not to have docstring on top
    "EM102",   # allow exception to use f-strings
    "FIX002",  # allow todos
    "DTZ011",  # allow datetimes without timezone
    "PLR2004", # Allow magic numbers (should be avoided, except some math contexts)
    "S311",    # No cryptography done here random is safe enough
    "PD901",   # Allow df variable name
    "COM812",  # Allow trailing comma to be missing
    "G004",    # Allow f-strings in logger (reasonable, but not here)
]


[tool.ruff.lint.flake8-import-conventions.aliases]
typing = "t"


[tool.setuptools_scm]
